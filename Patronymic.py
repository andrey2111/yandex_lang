# -*- coding: utf-8 -*-
from re import match, IGNORECASE


class Patronymer(object):
    def get_patro(self, name, feminine=False):
        ending = 'вна' if feminine else 'вич'  # стандартные окончания отчества

        # Исключения из правил
        if name == 'Пётр':  # Единственное имя, в отчестве которого 'ё' нужно заменить на 'е'
            name = 'Петр'

        if name == 'Михаил':  # Единственное имя, где 'и' необходимо заменить на 'й'
            name = 'Михайл'

        if name == 'Лев':  # Единственное имя, где надо поменять 'е' на 'ь'
            name = 'Льв'

        if name == 'Павел':  # Сокращение 'е'
            name = 'Павл'

        if name == 'Яков':  # Единственное имя, где перед окончанием надо добавить 'ле'
            name += 'ле'

        if name == 'Илья':  # Исключение для женского отчества
            return name[:-1] + ('инична' if feminine else 'ич')

        exceptions = ['Аникита', 'Никита', 'Мина', 'Савва', 'Сила', 'Фока', 'Фома']  # Традиционные формы отчеств
        if name in exceptions:
            return name[:-1] + ('ична' if feminine else 'ич')

        # Правило 1.
        # Если имя оканчивается на твёрдый согласный (кроме ж, ш, ч, щ, ц), добавляется -ович / овна.
        if match(r'\w+[бвгдзклмнпрстфх]$', name):
            return name + 'о' + ending

        # Правило 2.
        # Если имя оканчивается на неударное сочетание 'ий', к нему добавляется -евич / евна, причём конечный 'й'
        # отбрасывается, а предпоследний 'и' переходит в 'ь' после одного согласного или группы 'нт'
        if match(r'\w*([ауоыиэяюёе][бвгджзлмнпрстфчшщ]|нт)ий$', name, flags=IGNORECASE):
            return name[:-2] + 'ье' + ending

        # Правило 3.
        # Если имя оканчивается на мягкий согласный, т.е. на согласный + ь (кроме ль), к нему добавляется -евич / евна,
        # а конечный ь отбрасывается. Также если имя оканчивается на неударное сочетание 'ий', предпоследний 'и'
        # остаётся после 'к', 'х', 'ц', а также после двух согласных (кроме группы 'нт'). Также старые русские имена,
        # оканчивающиеся на сочетания 'ея' и 'ия'. Также имена, оканчивающиеся на ударные
        # сочетания 'ай', 'яй', 'ей', 'эй', 'ый', 'ой', 'уй', 'юй'.
        if match(r'\w+[^л]ь$', name) or match(r'\w*([кхц]|[бвгджзйклмнпрстфхцчшщ]{2})ий$', name, flags=IGNORECASE) \
                or match(r'\w*[еи]я$', name) or match(r'\w*[аяеэыоую]й$', name):
            return name[:-1] + 'е' + ending

        # Правило 4.
        # К именам, оканчивающимся на ж, ш, ч, щ, ц, добавляется -евич / евна
        # Также имена, оканчивающиеся на ударные гласные я, э, и, ё, ю
        # Также имена, оканчивающиеся на два гласных аа, ау, еу, ээ, ии, уу, оо
        # Также имена, оканчивающиеся на 'ль' и 'и'
        if match(r'\w+[жшчщц]$', name) or match(r'\w+(([аэиуо])\2|[ае]у)$', name) \
                or match(r'\w+(ль|[яэиёю])$', name):
            return name + 'е' + ending

        # Правило 5.
        # Если имя оканчивается на неударный гласный а, у, ы, о, к нему добавляется -ович / овна, конечный гласный
        # отбрасываются. Если неударному конечному гласному предшествует ж, ш, ч, щ, ц, или имя оканчивается на е,
        # то добавляется -евич / евна, а гласный отбрасывается.
        if match(r'\w+[ауыое]$', name):
            if match(r'[жшчщц]', name[-2]) or name.endswith('е'):
                return name[:-1] + 'е' + ending
            else:
                return name[:-1] + 'о' + ending


if __name__ == "__main__":
    p = Patronymer()
    assert p.get_patro("Иван") == "Иванович"
    assert p.get_patro("Андрей") == "Андреевич"
    assert p.get_patro("Дмитрий") == "Дмитриевич"
    assert p.get_patro("Фома") == "Фомич"
    assert p.get_patro("Егор") == "Егорович"
    assert p.get_patro("Фаддей") == "Фаддеевич"
    assert p.get_patro("Эмиль") == "Эмильевич"
    assert p.get_patro("Ярослав") == "Ярославович"
    assert p.get_patro("Илья") == "Ильич"
    assert p.get_patro("Валерий") == "Валерьевич"
    assert p.get_patro("Юрий") == "Юрьевич"
    assert p.get_patro("Андрей", True) == "Андреевна"
    assert p.get_patro("Пётр", True) == "Петровна"
    assert p.get_patro("Илья", True) == "Ильинична"
    assert p.get_patro("Савва", True) == "Саввична"
